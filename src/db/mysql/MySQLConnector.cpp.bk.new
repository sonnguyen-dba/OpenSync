#include "MySQLConnector.h"
#include "../utils/Logger.h"

MySQLConnector::MySQLConnector(const std::string& host, int port,
                               const std::string& user, const std::string& password,
                               const std::string& database)
    : host(host), port(port), user(user), password(password), database(database) {}

MySQLConnector::~MySQLConnector() {
    if (conn) {
        mysql_close(conn);
        conn = nullptr;
    }
}

bool MySQLConnector::connect() {
    conn = mysql_init(nullptr);
    if (!conn) {
        LOG_ERROR("MySQL initialization failed");
        return false;
    }

    if (!mysql_real_connect(conn, host.c_str(), user.c_str(), password.c_str(),
                            database.c_str(), port, nullptr, 0)) {
        LOG_ERROR("MySQL connection failed: " + std::string(mysql_error(conn)));
        return false;
    }

    LOG_INFO("✅ Connected to MySQL successfully!");
    return true;
}

bool MySQLConnector::isConnected() const {
    return conn != nullptr;
}

bool MySQLConnector::executeQuery(const std::string& sql) {
    if (!isConnected()) return false;

    if (mysql_query(conn, sql.c_str()) != 0) {
        LOG_ERROR("❌ MySQL query failed: " + std::string(mysql_error(conn)));
        return false;
    }
    return true;
}

bool MySQLConnector::executeBatchQuery(const std::vector<std::string>& sqlBatch) {
    if (!isConnected()) return false;

    if (mysql_autocommit(conn, 0) != 0) {
        LOG_ERROR("❌ Failed to disable autocommit: " + std::string(mysql_error(conn)));
        return false;
    }

    for (const auto& sql : sqlBatch) {
        if (mysql_query(conn, sql.c_str()) != 0) {
            LOG_ERROR("❌ MySQL batch query failed: " + std::string(mysql_error(conn)));
            mysql_rollback(conn);
            mysql_autocommit(conn, 1);
            return false;
        }
    }

    mysql_commit(conn);
    mysql_autocommit(conn, 1);
    LOG_INFO("✅ Batch executed successfully with " + std::to_string(sqlBatch.size()) + " queries.");
    return true;
}

std::unique_ptr<DBConnector> MySQLConnector::clone() const {
    return std::make_unique<MySQLConnector>(host, port, user, password, database);
}

